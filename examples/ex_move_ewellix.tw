{"version":"20211118","robotModel":"H2017","taskFile":{"name":"move_ewellix","type":"WRITER","file":{"taskName":"move_ewellix","nodeSequence":{"runNode":0,"repeatNode":0},"installationWatchVariables":[],"weldingSimulationMode":true,"ioControllerDigitalOutput":["","","","","","","","","","","","","","","",""],"ioFlangeDigitalOutput":["","","","","",""],"ioControllerAnalogOutput":["",""],"ioControllerDigitalInput":["","","","","","","","","","","","","","","",""],"ioFlangeDigitalInput":["","","","","",""],"ioControllerAnalogInput":["",""],"taskType":"TASK_WRITER","children":[{"_type":"GlobalNode","_pojo":{"prefix":"Global_","variables":{},"listVariables":{},"poses":{},"annotation":"","id":"f0bcbc28-8dad-4ddc-92be-70ecd4d8d488","name":"GlobalNode","isConfirm":true,"isSuppress":false,"isNotHighlightable":false}},{"_type":"CustomCodeNode","_pojo":{"type":"SCRIPT","script":"# -*- coding: utf-8 -*-\n\"\"\"\nEwellix class is used for the dialogue between an ewellix lifting column and a Doosan robot.\nPlease read the README.md file before use.\nCopyright (C) 2021 HumaRobotics\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n\"\"\"\n\nclass Ewellix:\n    \"\"\"\n    Interface to use Ewellix with Doosan\n    \"\"\"\n\n    def __init__(self, ip\u003d\"192.168.1.100\", port\u003d50001, low_position\u003d665):\n        \"\"\"\n        Initialize the connection between the Ewellix and the Doosan.\n\n        Params:\\n\n            - \u0027ip\u0027: ip of the Ewellix\n            - \u0027port\u0027: port of the Ewellix\n            - \u0027low_position\u0027: low position of the ewellix column (used to add an offset on move_to command)\n        \"\"\"\n\n        self.ip \u003d ip\n        self.port \u003d port\n        self.timeout \u003d 10 # 10 seconds timeout\n        self.low_position \u003d low_position\n\n        tp_log(\"connection to the Ewellix\")\n        try:\n            self._socket \u003d client_socket_open(self.ip, self.port)\n            tp_log(\"connection to the Ewellix ok !\")\n        except Exception as e:\n            tp_popup(\"Socket connection failed. Error: {0}\".format(\n                str(e)), DR_PM_ALARM)\n            raise e\n\n    def write(self, cmd):\n        \"\"\"\n        Write \u0027cmd\u0027 in the socket\n\n        Params:\\n\n            - \u0027cmd\u0027: a Ewellix TCP Protocol command\n\n        Return:\\n\n            - \u0027res\u0027: result of the writing\n\n        Exemple:\\n\n            write(\"recognize\")\n        \"\"\"\n\n        # Convert cmd in ascii before sending\n        cmd \u003d bytes(cmd+\"\\n\", encoding\u003d\"ascii\")\n\n        res \u003d client_socket_write(self._socket, cmd)\n\n        # Check res value\n        if res \u003d\u003d -1:\n            tp_log(\"error  \" + \n                \"Error during a socket write: Server not connected\")\n        elif res \u003d\u003d -2:\n            tp_log(\"error  \" + \"Error during a socket write: Socket error\")\n        elif res \u003d\u003d 0:\n            tp_log(\"info \" + \"Sending {0} command ok\".format(cmd))\n        return res\n\n    def read(self, length\u003d-1, timeout\u003d-1):\n        \"\"\"\n        Read the socket\n\n        Params:\\n\n            - \u0027length\u0027: number of bytes to read (default \u003d -1)\n            - \u0027timeout\u0027: Waiting time (default \u003d -1)\n\n        Return:\\n\n            - \u0027res\u0027: result of the reading\n            - \u0027rx_data\u0027: data received\n        \"\"\"\n\n        res, rx_data \u003d client_socket_read(self._socket, length, timeout)\n\n        # Check res value\n        if res \u003d\u003d -1:\n            tp_log(\"error \" + \n                \"Error during a socket read: Server not connected\")\n        elif res \u003d\u003d -2:\n            tp_log(\"error \" + \"Error during a socket read: Socket error\")\n        elif res \u003d\u003d -3:\n            tp_log(\"error \" + \n                \"Error during a socket read: Waiting time has expired\")\n        elif res \u003e 0:\n            tp_log(\"info\" + \n                \"Read res \u003d {0} and rx_data \u003d {1}\".format(res, rx_data))\n\n        # tp_popup(\"res\u003d{0}, rx_data\u003d{1}\".format(res, rx_data))\n        return res, rx_data.decode()\n\n    def get_status(self):\n        cmd \u003d \"get_status\"\n        self.write(cmd)\n        res, rx_data \u003d self.read()\n        return res, rx_data\n\n    def get_stroke(self):\n        cmd \u003d \"get_stroke\"\n        self.write(cmd)\n        res, rx_data \u003d self.read()\n        return res, rx_data\n\n    def get_virtual_limites(self):\n        cmd \u003d \"get_virtualLimits\"\n        self.write(cmd)\n        res, rx_data \u003d self.read()\n        return res, rx_data\n\n    def get_types_available(self):\n        cmd \u003d \"get_typesAvailable\"\n        self.write(cmd)\n        res, rx_data \u003d self.read()\n        return res, rx_data\n    \n    def get_position(self):\n        cmd \u003d \"get_position\"\n        self.write(cmd)\n        res, rx_data \u003d self.read()\n        return res, rx_data\n\n    def set_type(self, type\u003d\"LIFTKIT-601\"):\n        cmd \u003d \"set_type,\" + type\n        self.write(cmd)\n        res, rx_data \u003d self.read()\n        return res, rx_data\n\n    def set_virtual_limits(self, min\u003d0, max\u003d700):\n        cmd \u003d \"set_virtualLimits,\" + str(min) + \",\" + str(max)\n        self.write(cmd)\n        res, rx_data \u003d self.read()\n        return res, rx_data\n\n    def move_to(self, pos):\n        start_time \u003d time.time()\n        elapsed \u003d 0\n        while self.get_status()[1].split(\u0027,\u0027)[2].rstrip(\"\\n\") !\u003d \"READY\":\n            wait(0.2)\n            tp_popup(\"wait ewellix\")\n            elapsed \u003d time.time() - start_time \n            if elapsed \u003c self.timeout:\n                tp_popup(\"Timeout moveTo_absolutePosition\")\n                break\n\n        cmd \u003d \"moveTo_absolutePosition,\" + str(pos-self.low_position)\n        tp_popup(\"send to robot: \" + cmd)\n        self.write(cmd)\n        res, rx_data \u003d self.read()\n\n        start_time \u003d time.time()\n        elapsed \u003d 0\n        wait(3)\n        #tp_log(self.get_status()[1].split(\u0027,\u0027)[2].rstrip(\"\\n\"))\n        while self.get_status()[1].split(\u0027,\u0027)[2].rstrip(\"\\n\") !\u003d \"READY\":\n            wait(0.4)\n            tp_log(\"wait ewellix\")\n            elapsed \u003d time.time() - start_time \n            if elapsed \u003e self.timeout:\n                tp_popup(\"Timeout moveTo_absolutePosition\")\n                break\n\n        return res, rx_data\n        \n    def stop_moving(self):\n        cmd \u003d \"stop_moving\"\n        self.write(cmd)\n        res, rx_data \u003d self.read()\n        return res, rx_data\n\n    def initialise(self, type\u003d\"LIFTKIT-601\", min\u003d0, max\u003d700):\n        \"\"\"Initialization of the Ewellix\"\"\"\n\n        self.set_type(type\u003d\"LIFTKIT-601\")\n        self.set_virtual_limits(min\u003d0, max\u003d700)","id":"f05e086e-e16f-463d-9932-094575d52793","name":"CustomCodeNode","isConfirm":true,"isSuppress":false,"isNotHighlightable":false}},{"_type":"MainRoutine","_pojo":{"watchVariables":[],"isRepeat":false,"translationalVelocity":250.0,"translationalAcceleration":1.0,"rotationalVelocity":80.625,"rotationalAcceleration":322.5,"velocity":60.0,"acceleration":60.0,"singularityHandling":"AUTO_AVOIDANCE","children":[{"_type":"CustomCodeNode","_pojo":{"type":"SCRIPT","script":"ewellix \u003d Ewellix(ip\u003d\"192.168.1.100\", port\u003d50001, low_position\u003d762)\newellix.get_status()\newellix.initialise(type\u003d\"LIFTKIT-601\", min\u003d0, max\u003d900)\newellix.get_status()\n","id":"0cb7eea9-cf5c-47b1-a8ec-4fcfdb425f77","name":"CustomCodeNode","isConfirm":false,"isSuppress":false,"isNotHighlightable":false}},{"_type":"MoveJNode","_pojo":{"simpleType":true,"annotation":"","position":"ABSOLUTE","pose":{"pose1":-1.42,"pose2":5.89,"pose3":148.85,"pose4":0.0,"pose5":25.26,"pose6":-1.42},"speedType":"GLOBAL","velocity":60.0,"acceleration":60.0,"velocityPose":{"pose1":100.0,"pose2":80.0,"pose3":100.0,"pose4":180.0,"pose5":180.0,"pose6":180.0},"accelerationPose":{"pose1":100.0,"pose2":70.0,"pose3":100.0,"pose4":180.0,"pose5":180.0,"pose6":180.0},"time":1.0,"operatingMode":"SYNC","radius":0.0,"blendingMode":"DUPLICATE","id":"66341237-40ca-4bd7-a897-7c9e11c029c1","name":"MoveJNode","isConfirm":false,"isSuppress":false,"isNotHighlightable":false}},{"_type":"RepeatNode","_pojo":{"type":"STATEMENT","variableName":"","startValue":0,"count":1,"stepValue":1,"statement":"True","isCustomIndex":false,"customIndex":"","children":[{"_type":"UserInputNode","_pojo":{"message":"Entrez la hauteur colonne souhaitée","variableName":"ewellix_h","variableType":"INT","textBoolTrue":"True","textBoolFalse":"False","id":"bc820f58-5b9b-4844-8f2f-0a374e6fa55d","name":"UserInputNode","isConfirm":false,"isSuppress":false,"isNotHighlightable":false}},{"_type":"CustomCodeNode","_pojo":{"type":"SCRIPT","script":"ewellix.move_to(ewellix_h)\ntp_popup(\"position colonne: \" + str(ewellix.get_position()))","id":"b5398c7a-fa4d-44e7-99fe-f1d3c5c12ba1","name":"CustomCodeNode","isConfirm":false,"isSuppress":false,"isNotHighlightable":false}}],"isCollapse":false,"id":"4c03e599-6a6e-4b17-b9d2-76303d78936c","name":"RepeatNode","isConfirm":false,"isSuppress":false,"isNotHighlightable":false}}],"isCollapse":false,"id":"848a6e68-818b-4fcc-975c-cd03d986a277","name":"MainRoutine","isConfirm":true,"isSuppress":false,"isNotHighlightable":false}}],"isCollapse":false,"id":"6bae4edd-5db6-423d-8ddb-e5258fa2bf36","name":"Definition","isConfirm":false,"isSuppress":false,"isNotHighlightable":false},"workCellItemIds":[],"childWorkcellItemIds":[],"imported":false},"workCellItems":[],"childWorkCellItems":[]}